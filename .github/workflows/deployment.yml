name: Local CI/CD for Kubernetes (Self-Hosted)

on:
  push:
    branches:
      - main

env:
  IMAGE_NAME: profile-api
  SERVICE_NAME: profile-api
  DEPLOYMENT_NAME: profile-api-deployment
  CONTAINER_NAME: profile-api-container
  KUBE_PORT: 3011
  APP_PORT: 4011

jobs:
  build-and-deploy-local:
    runs-on: self-hosted

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Build local Docker image
        run: |
          IMAGE_TAG="${{ env.IMAGE_NAME }}:${{ github.sha }}"
          docker build -t $IMAGE_TAG .
          echo "IMAGE_TAG=$IMAGE_TAG" >> $GITHUB_ENV

      - name: Load image into KIND cluster
        run: kind load docker-image ${{ env.IMAGE_TAG }} --name profile-api-cluster

      - name: Create/Update K8s Secrets and ConfigMaps
        env:
          RESEND_API_KEY: ${{ secrets.RESEND_API_KEY }}
          EMAIL_FROM: ${{ vars.EMAIL_FROM }}
        run: |
          kubectl create secret generic profile-api-secrets \
            --from-literal=RESEND_API_KEY=${{ env.RESEND_API_KEY }} \
            --dry-run=client -o yaml | kubectl apply -f -
            
          # Create a Kubernetes ConfigMap. This is also idempotent.
          kubectl create configmap profile-api-config \
            --from-literal=EMAIL_FROM=${{ env.EMAIL_FROM }} \
            --dry-run=client -o yaml | kubectl apply -f -        

      - name: Deploy to Kubernetes
        run: |
          echo "Updating deployment with image: ${{ env.IMAGE_TAG }}"
          kubectl set image deployment/${{ env.DEPLOYMENT_NAME }} ${{ env.CONTAINER_NAME }}=${{ env.IMAGE_TAG }}
          
          kubectl rollout restart deployment/${{ env.DEPLOYMENT_NAME }}
          kubectl rollout status deployment/${{ env.DEPLOYMENT_NAME }}

      - name: Kill Previous Port-Forward
        run: |
          pkill -f "kubectl port-forward service/${{ env.SERVICE_NAME }} ${{ env.APP_PORT }}:${{ env.KUBE_PORT }}" || true
          echo "Waiting for 5 seconds for the old process to terminate..."
          sleep 5
      
      - name: Start Port-Forward in Background
        run: |
          setsid kubectl port-forward --address 0.0.0.0 service/${{ env.SERVICE_NAME }} ${{ env.APP_PORT }}:${{ env.KUBE_PORT }} > port-forward.log 2>&1 &